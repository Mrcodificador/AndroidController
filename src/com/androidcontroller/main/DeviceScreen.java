
/*
 Copyright (C) 2014  Mr Codificador

 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package com.androidcontroller.main;

import com.android.chimpchat.adb.AdbBackend;
import com.android.chimpchat.core.IChimpDevice;
import com.android.chimpchat.core.TouchPressType;
import com.androidcontroller.events.KeyConverter;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.io.IOException;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;

public class DeviceScreen extends javax.swing.JFrame {

    /**
     * Creates new form DeviceScreen
     */
    double scaleRatio;
    Image img;
    Timer t;
    IChimpDevice device;
    DeviceScreen Obj;
    AdbBackend adb;

    public DeviceScreen() {
        initComponents();
        Obj = this;
        scaleRatio = 1;
        t = new Timer();

        //adb = new AdbBackend("adb path", false);
        adb = new AdbBackend();

        device = adb.waitForConnection(5000, ".*");
        fetchImages();
        pnlImage.setFocusable(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlImage = new javax.swing.JPanel()
        {
            public void paintComponent(Graphics g){
                ((Graphics2D)g).scale(scaleRatio,scaleRatio);
                ((Graphics2D) g).setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
                if(img!=null){
                    g.drawImage(img, 0, 0, null);
                    super.paintComponent(g);
                }
            }
        }
        ;

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        pnlImage.setOpaque(false);
        pnlImage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                pnlImageMouseReleased(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                pnlImageMousePressed(evt);
            }
        });
        pnlImage.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                pnlImageMouseDragged(evt);
            }
        });
        pnlImage.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                pnlImageKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                pnlImageKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                pnlImageKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout pnlImageLayout = new javax.swing.GroupLayout(pnlImage);
        pnlImage.setLayout(pnlImageLayout);
        pnlImageLayout.setHorizontalGroup(
            pnlImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 324, Short.MAX_VALUE)
        );
        pnlImageLayout.setVerticalGroup(
            pnlImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 360, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pnlImageMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlImageMouseDragged
        try {
            device.getManager().touchMove((int) (evt.getX() / scaleRatio), (int) (evt.getY() / scaleRatio));
        } catch (IOException ex) {
            Logger.getLogger(DeviceScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_pnlImageMouseDragged

    private void pnlImageMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlImageMousePressed
        device.touch((int) (evt.getX() / scaleRatio), (int) (evt.getY() / scaleRatio), TouchPressType.DOWN);
    }//GEN-LAST:event_pnlImageMousePressed

    private void pnlImageMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlImageMouseReleased
        device.touch((int) (evt.getX() / scaleRatio), (int) (evt.getY() / scaleRatio), TouchPressType.UP);
    }//GEN-LAST:event_pnlImageMouseReleased

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing

        adb.shutdown();
        device = null;
        Obj.dispose();

    }//GEN-LAST:event_formWindowClosing

    private void pnlImageKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pnlImageKeyTyped
        try {
            System.out.println("I am here ");
            device.getManager().type(evt.getKeyChar());
        } catch (IOException ex) {
            Logger.getLogger(DeviceScreen.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_pnlImageKeyTyped

    private void pnlImageKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pnlImageKeyReleased
        try {
            String code = KeyConverter.getKeyCodeString(evt);
            device.getManager().keyUp(code);
        } catch (IOException ex) {
            Logger.getLogger(DeviceScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_pnlImageKeyReleased

    private void pnlImageKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pnlImageKeyPressed
        try {
            String code = KeyConverter.getKeyCodeString(evt);
            device.getManager().keyDown(code);
        } catch (IOException ex) {
            Logger.getLogger(DeviceScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_pnlImageKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DeviceScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DeviceScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DeviceScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DeviceScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DeviceScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel pnlImage;
    // End of variables declaration//GEN-END:variables

    private void fetchImages() {
        t.schedule(new TimerTask() {

            @Override
            public void run() {
                img = device.takeSnapshot().createBufferedImage();
                pnlImage.setPreferredSize(new Dimension((int) (img.getWidth(null) * scaleRatio), (int) (img.getHeight(null) * scaleRatio)));
                pnlImage.repaint();
                Obj.setSize(((int) (img.getWidth(null) * scaleRatio) + 23), ((int) (img.getHeight(null) * scaleRatio) + 68));
            }
        }, 200, 5);
    }
}
